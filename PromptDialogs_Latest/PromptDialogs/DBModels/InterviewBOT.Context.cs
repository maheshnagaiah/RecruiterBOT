//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PromptDialogs.DBModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RecruitBOTEntities : DbContext
    {
        public RecruitBOTEntities()
            : base("name=RecruitBOTEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<UserJobMapping> UserJobMappings { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<JobCategory> JobCategories { get; set; }
        public virtual DbSet<JobListing> JobListings { get; set; }
        public virtual DbSet<JobTechnology> JobTechnologies { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
        public virtual DbSet<InterviewPanel> InterviewPanels { get; set; }
    
        public virtual ObjectResult<getJobDetails_Result> getJobDetails(string jobTechnology, string jobCategory, Nullable<int> experience, ObjectParameter errorMessage)
        {
            var jobTechnologyParameter = jobTechnology != null ?
                new ObjectParameter("JobTechnology", jobTechnology) :
                new ObjectParameter("JobTechnology", typeof(string));
    
            var jobCategoryParameter = jobCategory != null ?
                new ObjectParameter("JobCategory", jobCategory) :
                new ObjectParameter("JobCategory", typeof(string));
    
            var experienceParameter = experience.HasValue ?
                new ObjectParameter("Experience", experience) :
                new ObjectParameter("Experience", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getJobDetails_Result>("getJobDetails", jobTechnologyParameter, jobCategoryParameter, experienceParameter, errorMessage);
        }
    
        public virtual int InsertUserDetails(Nullable<long> userID, Nullable<long> channelID, string username, Nullable<int> experience, string cGPA, string expertiseInTechnology, string currentCompany, byte[] resume, ObjectParameter userDetails)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(long));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(long));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var experienceParameter = experience.HasValue ?
                new ObjectParameter("Experience", experience) :
                new ObjectParameter("Experience", typeof(int));
    
            var cGPAParameter = cGPA != null ?
                new ObjectParameter("CGPA", cGPA) :
                new ObjectParameter("CGPA", typeof(string));
    
            var expertiseInTechnologyParameter = expertiseInTechnology != null ?
                new ObjectParameter("ExpertiseInTechnology", expertiseInTechnology) :
                new ObjectParameter("ExpertiseInTechnology", typeof(string));
    
            var currentCompanyParameter = currentCompany != null ?
                new ObjectParameter("CurrentCompany", currentCompany) :
                new ObjectParameter("CurrentCompany", typeof(string));
    
            var resumeParameter = resume != null ?
                new ObjectParameter("Resume", resume) :
                new ObjectParameter("Resume", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUserDetails", userIDParameter, channelIDParameter, usernameParameter, experienceParameter, cGPAParameter, expertiseInTechnologyParameter, currentCompanyParameter, resumeParameter, userDetails);
        }
    }
}
